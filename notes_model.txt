# 使用原有DB產生model
python manage.py inspectdb --database rmotelog > db1model.py
# 將新增的class copy 到原本的model.py
'''
model 中，managed = False表示只建管理用資料，不在default db建table
class Meta:
        managed = False
'''


# 產生migration script
python manage.py makemigrations
# 於admin package 中產生相對印的權限
python manage.py migrate (--database DATABASE) #指的是將DJANGO MODEL的資料(權限/META DATA)寫的那個DB
python manage.py migrate auth --database usertest # 只migrate auth app 的table

# 清除migration history
python manage.py showmigrations
刪除app/migrates 下所有檔案(保留__init__.py)
python manage.py makemigrations app
python manage.py migrate app
python manage.py showmigrations

# order_by 中加 - 表示遞減
Entry.objects.filter(pub_date__year=2005).order_by('-pub_date', 'headline')

# __gte >= , __gt > ...
from django.db.models import Q, Max, Min

records = table.objects.using(db).filter(date__gte='20180703',  date__lte='20180704',col__in=['a','b']).order_by('-date')
#like select * from Ipmpc where date >= '20180703' and date <='20180704' and col in ('a','b') order by date desc

records = Netadaptermonitor.objects.using(db).filter(Q(detecttime__gte=20180703)).values('computername', 'username','networkadapter').annotate(orgnamepath=Max('orgnamepath')).annotate(s_time=Min('detecttime')).annotate(e_time=Max('detecttime'))    
#like select 'computername', 'username','networkadapter',Max('orgnamepath') as orgnamepath,Min('detecttime') as s_time,Max('detecttime') as e_time where  date >= '20180703' group by 'computername', 'username','networkadapter'
# values()  ==> group by  



# keyword : Field lookups




#
from django.db import models
from datetime import datetime
from django.core.exceptions import ValidationError
# Create your models here.
# 每個Model都會自動建立id欄，不需要特別宣造
# 发布会
class Event(models.Model):
    name = models.CharField(max_length=100)            # 发布会标题
    limit = models.IntegerField()                      # 限制人数
    status = models.BooleanField()                     # 状态
    address = models.CharField(max_length=200)         # 地址
    start_time = models.DateTimeField('events time')   # 发布会时间
    create_time = models.DateTimeField(auto_now=True)  # 创建时间（自动获取当前时间）

    def __str__(self):
        return self.name

    def save(self, *args, **kwargs): # 要在model存檔時做檢查可以用此寫法
        if self.start_time:
            if not self.start_time > datetime.now():
                raise ValidationError("start_time must be greater than current time")
		# if self.end_date:
		# 	if not self.start_date:
		# 		raise ValidationError("start time missing. Please check the data")
		# 	if not self.end_date > self.start_date:
		# 		raise ValidationError("end time must be greater than start time")
        super().save(*args, **kwargs)

